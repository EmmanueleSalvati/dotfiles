#+title: Personal emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.personal/init.el :mkdirp yes
#+auto_tangle: t
#+STARTUP: show2levels

* Table of Contents                                                     :TOC:
- [[#package-system-setup][Package System Setup]]
- [[#ui-configuration][UI configuration]]
  - [[#font-and-transparency][Font and transparency]]
  - [[#basic-stuff][Basic stuff]]
  - [[#color-theme][Color theme]]
  - [[#zooming-inout][Zooming in/out]]
  - [[#highlight-todo][Highlight TODO]]
- [[#which-key][Which-key]]
- [[#magit][Magit]]
- [[#org-mode][Org Mode]]
  - [[#center-org-buffers][Center Org Buffers]]
  - [[#nicer-heading-bullets][Nicer Heading Bullets]]
  - [[#org-auto-tangle][Org Auto-Tangle]]
  - [[#org-tempo][Org Tempo]]
  - [[#org-toc][Org TOC]]
  - [[#org-modern][Org Modern]]
  - [[#org-agenda--capture][Org Agenda + Capture]]
  - [[#org-agenda][Org Agenda]]
- [[#vertico][Vertico]]
- [[#vertico-posframe][Vertico posframe]]
- [[#marginalia][Marginalia]]
- [[#consult][Consult]]
- [[#corfu-mode][Corfu mode]]
- [[#orderless][Orderless]]
  - [[#basic-working][Basic working]]
  - [[#not-working][Not working]]
- [[#embark][Embark]]
- [[#all-the-icons][All the Icons]]
- [[#all-the-icons-completions][All the icons completions]]
- [[#rainbow-mode-and-delimiters][Rainbow mode and delimiters]]
- [[#doom-modeline][Doom modeline]]
- [[#exec-path-from-shell][exec-path-from-shell]]
- [[#tree-sit-auto][Tree-sit auto]]
- [[#tree-sitter-grammars][Tree-sitter grammars]]
  - [[#remap-major-modes-into-tree-sitter-major-modes][Remap major modes into tree-sitter major-modes]]
- [[#python-mode][Python mode]]
  - [[#pyvenv][pyvenv]]
  - [[#highlight-indent-guides][Highlight-indent-guides]]
- [[#yaml-mode][YAML mode]]
- [[#code-folding][Code folding]]
- [[#eglot][Eglot]]
- [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]

* Package System Setup

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
  	 (expand-file-name
  	  "straight/repos/straight.el/bootstrap.el"
  	  (or (bound-and-true-p straight-base-dir)
  	      user-emacs-directory)))
  	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	  (url-retrieve-synchronously
  	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	   'silent 'inhibit-cookies)
  	(goto-char (point-max))
  	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; This was requested by emacs at startup
  (straight-use-package 'org)

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
#+end_src

* UI configuration
** Font and transparency

These are basic font configurations

#+begin_src emacs-lisp

  (defvar es/default-font-size 100)
  (defvar es/default-variable-font-size 100)
  (when (eq system-type 'darwin)
    (setq es/default-font-size 180
	  es/default-variable-font-size 180))
  (when (equal (system-name) "yarnbaby")
    (setq es/default-font-size 150
	  es/default-variable-font-size 150))
  (defvar es/frame-transparency '(99 . 99))

#+end_src

#+begin_src emacs-lisp
  (defun es/set-font-faces ()
    (message "Setting font faces!")

    (set-face-attribute 'default nil :font "Iosevka" :height es/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height es/default-font-size)
    (set-face-attribute 'variable-pitch nil :font "Iosevka" :height es/default-variable-font-size :weight 'regular))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (setq doom-modeline-icon t)
		  (with-selected-frame frame
		    (es/set-font-faces))))
    (es/set-font-faces))
#+end_src

** Basic stuff

#+begin_src emacs-lisp
  (setq visible-bell t)
  (tooltip-mode -1)
  (column-number-mode)
  (set-frame-parameter (selected-frame) 'alpha es/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,es/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Color theme

#+begin_src emacs-lisp
   (use-package doom-themes
     :init (load-theme 'doom-Iosvkem)
     ;; Enable flashing mode-line on errors
     :config
     (doom-themes-visual-bell-config)
     ;; Corrects (and improves) org-mode's native fontification.
     (doom-themes-org-config))

  ;; (use-package catppuccin-theme
  ;;     :init (load-theme 'catppuccin :no-confirm))
  ;;   (setq catppuccin-flavor 'macchiato) ;; or 'latte, 'macchiato, or 'mocha
  ;;   (catppuccin-reload)
#+end_src

** Zooming in/out
#+begin_src emacs-lisp
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Highlight TODO
Just to highlight some keywords

#+begin_src emacs-lisp
  (use-package hl-todo
    :hook ((org-mode . hl-todo-mode)
	   (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
	  hl-todo-keyword-faces
	  `(("TODO"       warning bold)
	    ("FIXME"      error bold)
	    ("HACK"       font-lock-constant-face bold)
	    ("REVIEW"     font-lock-keyword-face bold)
	    ("NOTE"       success bold)
	    ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
* Which-key

Useful UI panel for key bindings

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-separator " → " ))
#+end_src

* Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

* Org Mode
** Center Org Buffers

visual-fill-column to center =org-mode= buffers

#+begin_src emacs-lisp
  (defun es/org-mode-visual-fill ()
    (setq visual-fill-column-width 140
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . es/org-mode-visual-fill))
#+end_src

** Nicer Heading Bullets

Do I even need this anymore?
#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Org Auto-Tangle

Needs #+auto_tangle: t in the header

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Org Tempo

Useful for automatically expanding src code

#+begin_src emacs-lisp
  (use-package org-tempo
    :straight nil)
#+end_src

** Org TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern)
  (with-eval-after-load 'org (global-org-modern-mode))
#+end_src

** Org Agenda + Capture

Here we go. Setup the agenda, trying to remove unnecessary stuff.
#+begin_src emacs-lisp
  (setq org-base-path (expand-file-name "~/pCloudDrive/org"))

  (define-key global-map (kbd "C-c c") #'org-capture)
  (define-key global-map (kbd "C-c a") #'org-agenda)
  (define-key global-map (kbd "C-c l") #'org-store-link)

  (use-package org
    :config
    (setq org-directory org-base-path
  	org-agenda-start-with-log-mode t
  	org-log-done 'time
  	org-log-into-drawer t
  	org-agenda-files '("Tasks.org"
  			   "piano-log.org"
  			   "work-log.org"
  			   "Archive.org"
  			   "mybooks.org"
  			   "goals.org")
  	org-todo-keywords '((sequence "TODO(t)" "ACTIVE(a)" "|" "DONE(d!)" "CANC(k@)"))
  	org-tag-alist '(("Today" . ?t)
  			("This Week" . ?w)
  			("@home" . ?H)
  			("@work" . ?W)
  			("@phone" . ?P)
  			("piano" . ?p)
  			(:startgroup)
  			("read" . ?r)
  			("write" . ?s)
  			("code" . ?c)
  			("errand" . ?e)
  			(:endgroup))
  	org-capture-templates
  	'(("t" "Tasks / Projects")
  	  ("tt" "Task" entry
  	   (file+olp "Tasks.org" "Personal Tasks")
  	   "**TODO %?\n %U\n %a\n %i" :empty-lines 1)
            ("tw" "Work Task" entry
  	   (file+olp "Tasks.org" "Work Tasks")
           "** TODO %?\n  %U\n  %a\n  %i" :empty-lines 1))))
  #+end_src

** Org Agenda
Configure custom views

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :after org
    :hook (org-mode . org-super-agenda-mode))

  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
  	 ((tags-todo
  	   "GHD+ACTIVE+PRIORITY=\"A\""
  	   ((org-agenda-prefix-format "   %t   %s")
  	   (org-agenda-overriding-header "Primary goals this month")))
  	  (tags-todo
  	   "GHD+ACTIVE+PRIORITY=\"C\""
  	   ((org-agenda-prefix-format "   %t   %s")
  	    (org-agenda-overriding-header "Secondary goals this month")))
  	
  	  (alltodo
  	   ""
  	   ((org-agenda-prefix-format "   %t   %s")
  	 
  	   (org-agenda-overriding-header "ALL TASKS")
  	    (org-super-agenda-groups '((:discard (:tag "GHD"))
  				       (:name "Active"
  					      :todo "ACTIVE"
  					      :order 0)
  				       (:name "Important"
  					      :priority "A"
  					      :order 1)
  				       (:name "Work"
  					      :tag "@work"
  					      :order 2)
  				       (:name "Errands"
  					      :tag "errand"
  					      :order 3)
  				       (:name "Backlog"
  					      :priority<= "B"
  					      :order 4)))))))
  	  ("t" "Today's Tasks"
  	     ((tags-todo
  		"GHD+ACTIVE+PRIORITY=\"A\""
  		((org-agenda-prefix-format "   %t   %s")
  		 (org-agenda-overriding-header "Primary goals this month")))
  	       (tags-todo
  		"GHD+ACTIVE+PRIORITY=\"C\""
  		((org-agenda-prefix-format "   %t   %s")
  		 (org-agenda-overriding-header "Secondary goals this month")))
  	       (tags-todo
  		"Today"
  		((org-agenda-prefix-format "   %t   %s")
  		 (org-agenda-overriding-header "TO DO TODAY")
  		 (org-super-agenda-groups '((:name "Work"
  						   :tag "@work"
  						   :order 0)
  					    (:name "Piano"
  						   :tag "Piano"
  						   :order 1)
  					    (:name "Errands"
  						   :tag "errand")))))
  	       (agenda "" ((org-agenda-span 1)
  			   (org-agenda-overriding-header "Today")))))
  	  		
  	     ("w" "This Week's Tasks"
  	      ((tags-todo
  		"GHD+ACTIVE+PRIORITY=\"A\""
  		((org-agenda-prefix-format "   %t   %s")
  		 (org-agenda-overriding-header "Primary goals this month")))
                 (tags-todo
  		"GHD+ACTIVE+PRIORITY=\"C\""
  		((org-agenda-prefix-format "   %t   %s")
  		 (org-agenda-overriding-header "Secondary goals this month")))
                 (tags-todo
  		"This Week"
  		((org-agenda-prefix-format "   %t   %s")
  		 (org-agenda-overriding-header "This Week")
  		 (org-super-agenda-groups '((:name "Work"
  						   :tag "@work"
  						   :order 0)
  					    (:name "Piano"
  						   :tag "Piano"
  						   :order 1)
  					    (:name "Errands"
  						   :tag "errand"
  						   :order 2)))))
                 (agenda "" ((org-agenda-span 7)
  			   (org-agenda-overriding-header "This week")))))
  	     ))
    #+end_src
* Vertico

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)

  ;; Show more candidates
  (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t))
#+end_src

* Vertico posframe

To center the minibuffer
#+begin_src emacs-lisp
  (use-package vertico-posframe
    :init
    (vertico-posframe-mode 1))
#+end_src

* Marginalia

Give more details to minibuffer commands

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be actived in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

* Consult

Toolset that adds useful functionality to commands

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :after vertico
    :bind (("C-x b"       . consult-buffer)
	   ("C-x C-k C-k" . consult-kmacro)
	   ("M-y"         . consult-yank-pop)
	   ("M-g g"       . consult-goto-line)
	   ("M-g M-g"     . consult-goto-line)
	   ("M-g f"       . consult-flymake)
	   ("M-g i"       . consult-imenu)
	   ("C-s"         . consult-line)
	   ("M-s L"       . consult-line-multi)
	   ("M-s u"       . consult-focus-lines)
	   ("M-s g"       . consult-ripgrep)
	   ("M-s M-g"     . consult-ripgrep)
	   ("M-s f"       . consult-find)
	   ("M-s M-f"     . consult-find)
	   ("C-x C-SPC"   . consult-global-mark)
	   ("C-x M-:"     . consult-complex-command)
	   ("C-c n"       . consult-org-agenda)
	   ("M-X"         . consult-mode-command)
	   :map minibuffer-local-map
	   ("M-r" . consult-history)
	   :map Info-mode-map
	   ("M-g i" . consult-info)
	   :map org-mode-map
	   ("M-g i"  . consult-org-heading))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    :config
    (recentf-mode t))
#+end_src

#+begin_src emacs-lisp
  (use-package consult-dir
    :ensure t
    :bind (("C-x C-j" . consult-dir)
	   :map vertico-map
	   ("C-x C-j" . consult-dir)))
#+end_src

* Corfu mode

Implements completion at point. TODO requires more study.

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-preselect 'directory)
    :init
    (global-corfu-mode)
    (setq tab-always-indent 'complete))

  ;; A few more useful configurations...
  ;; (use-package emacs
  ;;   :custom
  ;;   ;; Enable indentation+completion using the TAB key.
  ;;   ;; `completion-at-point' is often bound to M-TAB.
  ;;   (tab-always-indent 'complete)

  ;;   ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
  ;;   ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
  ;;   ;; setting is useful beyond Corfu.
  ;;   (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

* Orderless
** Basic working
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
 #+end_src

** Not working


A completion style, copied from here: https://kristofferbalintona.me/posts/202202211546/

#+begin_src emacs-lisp
;;  (use-package orderless)
;;    :custom
  ;;  (completion-styles '(orderless))      ; Use orderless
    ;;(completion-category-defaults nil)    ; I want to be in control!
    ;;(completion-category-overrides
    ;; '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
	;;	     orderless))))
    ;;(orderless-matching-styles
;;     '(orderless-literal
;;       orderlessn-prefixes
;;       orderless-initialism
;;       orderless-regexp
       ;; orderless-flex                       ; Basically fuzzy finding
       ;; orderless-strict-leading-initialism
       ;; orderless-strict-initialism
       ;; orderless-strict-full-initialism
       ;; orderless-without-literal          ; Recommended for dispatches instead
;;       )))
#+end_src

* Embark

#+begin_src emacs-lisp
 (use-package embark)
 (use-package embark-consult
   :hook
   (embark-collection-mode . consult-preview-at-point-mode))
#+end_src

* All the Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* All the icons completions

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src
* Rainbow mode and delimiters

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook org-mode prog-mode)

  (use-package rainbow-delimiters
    :hook ((org-mode . rainbow-delimiters-mode)
	   (prog-mode . rainbow-delimiters-mode)))
#+end_src

* Doom modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

* exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    (when (daemonp)
      (exec-path-from-shell-initialize)))
#+end_src

* Tree-sit auto
#+begin_src emacs-lisp
  (use-package treesit-auto
    :demand t
    :config
    (global-treesit-auto-mode))

#+end_src
* Tree-sitter grammars
# #+begin_src emacs-lisp
#   (setq treesit-language-source-alist
#    '((bash "https://github.com/tree-sitter/tree-sitter-bash")
#      (cmake "https://github.com/uyha/tree-sitter-cmake")
#      (css "https://github.com/tree-sitter/tree-sitter-css")
#      (elisp "https://github.com/Wilfred/tree-sitter-elisp")
#      (go "https://github.com/tree-sitter/tree-sitter-go")
#      (html "https://github.com/tree-sitter/tree-sitter-html")
#      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
#      (json "https://github.com/tree-sitter/tree-sitter-json")
#      (make "https://github.com/alemuller/tree-sitter-make")
#      (markdown "https://github.com/ikatyang/tree-sitter-markdown")
#      (python "https://github.com/tree-sitter/tree-sitter-python")
#      (toml "https://github.com/tree-sitter/tree-sitter-toml")
#      (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
#      (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
#      (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

#   ;; install all these language grammars
#   (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

# #+end_src

** Remap major modes into tree-sitter major-modes
# #+begin_src emacs-lisp
#   (setq major-mode-remap-alist
#         '((yaml-mode . yaml-ts-mode)
#   	(bash-mode . bash-ts-mode)
#   	(js2-mode . js-ts-mode)
#   	(typescript-mode . typescript-ts-mode)
#   	(json-mode . json-ts-mode)
#   	(css-mode . css-ts-mode)
#   	(python-mode . python-ts-mode)))
# #+end_src
* Python mode

#+begin_src emacs-lisp
;;  (use-package python
;;    :hook ((python-ts-mode . eglot-ensure))
;;    :mode (("\\.py\\'" . python-ts-mode)))
#+end_src
Flymake-show-buffer-diagnostics shows the errors on the python file

** pyvenv

#+begin_src emacs-lisp

  (use-package pyvenv
    :ensure t
    :init
    (setenv "WORKON_HOME" "~/.pyenv/versions")
    :config
    (pyvenv-mode 1)
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")))))
#+end_src

** Highlight-indent-guides

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :init
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    :config
    (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
    (setq highlight-indent-guides-method 'character))
#+end_src

* YAML mode
Define Yaml mode. TODO Need to change the key mapping.
Need the treesitter yaml grammar installed:

=npm install tree-sitter-yaml tree-sitter=

#+begin_src emacs-lisp
  (use-package yaml-mode
    :hook (yaml-mode . (lambda () (define-key yaml-mode-map "C-m" 'newline-and-indent)))
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

* Code folding

This looks useful:

# #+begin_src emacs-lisp
#   (use-package ts-fold
#     :straight (ts-fold :type git :host github :repo "emacs-tree-sitter/ts-fold"))
# #+end_src

* Eglot

#+begin_src emacs-lisp
  (use-package eglot
    :bind (:map eglot-mode-map
  	      ("C-c d" . eldoc)
  	      ("C-c a" . eglot-code-actions)
  	      ("C-c r" . eglot-rename)
  	      ("C-c f" . eglot-format-buffer))
    :hook ((python-ts-mode . eglot-ensure)
  	 (python-ts-mode . hs-minor-mode)
  	 (python-ts-mode . flyspell-prog-mode)
  	 (python-ts-mode . (lambda () (set-fill-column 88))))
    :config
    (setq-default eglot-workspace-configuration
  		'((:pylsp . (:configurationSources ["flake8"]
  						   :plugins (
  							     :pycodestyle ( :enabled :json-false)
  							     :mccabe (:enabled :json-false)
  							     :pyflakes (:enabled :json-false)
  							     :flake8 (:enabled :json-false
  									       :maxLineLength 88)
  							     :ruff (:enabled t
  									     :lineLength 88)
  							     :pydocstyle (:enabled t
  										   :convention "numpy")
  							     :yapf (:enabled t :json-false)
  							     :autopep8 (:enabled :json-false)
  							     :black (:enabled t
  									      :line_length 88
  									      :cache_config t)))))))
#+end_src

* vterm
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq shell-file-name "/opt/homebrew/bin/zsh"
  	vterm-max-scrollback 5000))
#+end_src

** vterm-toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil
  	vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
  	       '((lambda (buffer-or-name _)
  		   (let ((buffer (get-buffer buffer-or-name)))
  		     (with-current-buffer buffer
  		       (or (equal major-mode 'vterm-mode)
  			   (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
  		 (display-buffer-reuse-window display-buffer-at-bottom)
  		 (reusable-frames . visible)
  		 (window-height . 0.3))))
#+end_src
