#+title: Personal emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.personal/init.el :mkdirp yes
#+auto_tangle: t
#+STARTUP: show2levels

* Table of Contents                                                     :TOC:
- [[#package-system-setup][Package System Setup]]
  - [[#setup-straightel][Setup Straight.el]]
  - [[#debug-on-startup][Debug on Startup]]
  - [[#keep-folders-clean][Keep folders clean]]
- [[#ui-configuration][UI configuration]]
  - [[#font-and-transparency][Font and transparency]]
  - [[#basic-stuff][Basic stuff]]
  - [[#color-theme][Color theme]]
  - [[#zooming-inout][Zooming in/out]]
  - [[#highlight-todo][Highlight TODO]]
- [[#dired][Dired]]
- [[#ibuffer][Ibuffer]]
- [[#which-key][Which-key]]
- [[#magit][Magit]]
- [[#org-mode][Org Mode]]
  - [[#center-org-buffers][Center Org Buffers]]
  - [[#nicer-heading-bullets][Nicer Heading Bullets]]
  - [[#org-auto-tangle][Org Auto-Tangle]]
  - [[#org-tempo][Org Tempo]]
  - [[#org-toc][Org TOC]]
  - [[#org-modern][Org Modern]]
  - [[#org-agenda--capture][Org Agenda + Capture]]
  - [[#tag-faces][Tag faces]]
  - [[#org-super-agenda][Org Super Agenda]]
  - [[#org-books][Org-books]]
  - [[#org-roam][Org-Roam]]
- [[#vertico][Vertico]]
- [[#vertico-posframe][Vertico posframe]]
- [[#marginalia][Marginalia]]
- [[#consult][Consult]]
- [[#corfu-mode][Corfu mode]]
- [[#orderless][Orderless]]
  - [[#basic-working][Basic working]]
  - [[#not-working][Not working]]
- [[#embark][Embark]]
- [[#all-the-icons][All the Icons]]
- [[#all-the-icons-completions][All the icons completions]]
- [[#rainbow-mode-and-delimiters][Rainbow mode and delimiters]]
- [[#doom-modeline][Doom modeline]]
- [[#exec-path-from-shell][exec-path-from-shell]]
- [[#tree-sit-auto][Tree-sit auto]]
- [[#tree-sitter-grammars][Tree-sitter grammars]]
- [[#treesit-fold][Treesit-fold]]
- [[#python-mode][Python mode]]
  - [[#pyvenv][pyvenv]]
  - [[#highlight-indent-guides][Highlight-indent-guides]]
- [[#yaml-mode][YAML mode]]
- [[#eglot][Eglot]]
- [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]
- [[#line-number-mode][Line number mode]]
- [[#dired-rsync][Dired-rsync]]
- [[#markdown][Markdown]]
- [[#lilypond][Lilypond]]
- [[#treemacs][Treemacs]]
- [[#winum][Winum]]

* Package System Setup
** Setup Straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
  	 (expand-file-name
  	  "straight/repos/straight.el/bootstrap.el"
  	  (or (bound-and-true-p straight-base-dir)
  	      user-emacs-directory)))
  	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	  (url-retrieve-synchronously
  	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	   'silent 'inhibit-cookies)
  	(goto-char (point-max))
  	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; This was requested by emacs at startup
  (straight-use-package 'org)

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
#+end_src
** Debug on Startup
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src
** Keep folders clean
Thanks to System Crafters
#+begin_src emacs-lisp
  ;; temporary files, e.g. *~ files
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  ;; Auto save files
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp-auto-saves/" user-emacs-directory) t)))

  ;; Lock files
  ;; (setq create-lockfiles nil)

  (use-package no-littering)
#+end_src
* UI configuration
** Font and transparency

These are basic font configurations

#+begin_src emacs-lisp

  (defvar es/default-font-size 100)
  (defvar es/default-variable-font-size 100)
  (when (eq system-type 'darwin)
    (setq es/default-font-size 180
	  es/default-variable-font-size 180))
  (when (equal (system-name) "yarnbaby")
    (setq es/default-font-size 150
	  es/default-variable-font-size 150))
  (defvar es/frame-transparency '(99 . 99))

#+end_src

#+begin_src emacs-lisp
  (defun es/set-font-faces ()
    (message "Setting font faces!")

    (set-face-attribute 'default nil :font "Iosevka" :height es/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height es/default-font-size)
    (set-face-attribute 'variable-pitch nil :font "Iosevka" :height es/default-variable-font-size :weight 'regular))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (setq doom-modeline-icon t)
		  (with-selected-frame frame
		    (es/set-font-faces))))
    (es/set-font-faces))
#+end_src

** Basic stuff

#+begin_src emacs-lisp
  (setq visible-bell t)
  (tooltip-mode -1)
  (column-number-mode)
  (set-frame-parameter (selected-frame) 'alpha es/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,es/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Color theme

#+begin_src emacs-lisp
  (use-package ef-themes
    :config
    (ef-themes-select 'ef-day))
  ;; was ef-dream

    ;;  (use-package doom-themes
    ;;    :init (load-theme 'doom-Iosvkem)
    ;;    ;; Enable flashing mode-line on errors
    ;;    :config
    ;;    (doom-themes-visual-bell-config)
    ;;    ;; Corrects (and improves) org-mode's native fontification.
    ;;    (doom-themes-org-config))

    ;; (use-packa  ge catppuccin-theme
    ;;     :init (load-theme 'catppuccin :no-confirm))
    ;;   (setq catppuccin-flavor 'macchiato) ;; or 'latte, 'macchiato, or 'mocha
    ;;   (catppuccin-reload)
#+end_src

** Zooming in/out
#+begin_src emacs-lisp
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Highlight TODO
Just to highlight some keywords

#+begin_src emacs-lisp
  (use-package hl-todo
    :hook ((org-mode . hl-todo-mode)
	   (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
	  hl-todo-keyword-faces
	  `(("TODO"       warning bold)
	    ("FIXME"      error bold)
	    ("HACK"       font-lock-constant-face bold)
	    ("REVIEW"     font-lock-keyword-face bold)
	    ("NOTE"       success bold)
	    ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
* Dired
Dired jump key binding
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-x j") #'dired-jump)
#+end_src
* Ibuffer
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-x C-b") #'ibuffer)
#+end_src
* Which-key

Useful UI panel for key bindings

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-separator " → " ))
#+end_src

* Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

* Org Mode
** Center Org Buffers

visual-fill-column to center =org-mode= buffers

#+begin_src emacs-lisp
  (defun es/org-mode-visual-fill ()
    (setq visual-fill-column-width 140
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . es/org-mode-visual-fill))
#+end_src

** Nicer Heading Bullets

Do I even need this anymore?
#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Org Auto-Tangle

Needs #+auto_tangle: t in the header

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Org Tempo

Useful for automatically expanding src code

#+begin_src emacs-lisp
  (use-package org-tempo
    :straight nil)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** Org TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern)
  (with-eval-after-load 'org (global-org-modern-mode))
#+end_src

** Org Agenda + Capture

Here we go. Setup the agenda, trying to remove unnecessary stuff.
#+begin_src emacs-lisp
  (setq org-base-path (expand-file-name "~/Documents/org"))

  (define-key global-map (kbd "C-c c") #'org-capture)
  (define-key global-map (kbd "C-c a") #'org-agenda)
  (define-key global-map (kbd "C-c l") #'org-store-link)

  (use-package org
    :config
    (setq org-directory org-base-path
    	org-agenda-start-with-log-mode t
    	org-log-done 'time
    	org-log-into-drawer t
    	org-agenda-files '("Tasks.org"
    			   "piano-log.org"
    			   "piano.org"
    			   "work-log.org"
    			   "Archive.org"
  			   "chess-analysis.org"
    			   "mybooks.org")
      	org-todo-keywords '((sequence "TODO(t)" "ACTIVE(a)" "|" "DONE(d!)" "CANC(k@/!)"))
    	org-tag-alist '(("Today" . ?t)
    			("ThisWeek" . ?w)
    			("@home" . ?H)
    			("@work" . ?W)
    			("@phone" . ?h)
  			("chess" . ?C)
    			("piano" . ?p)
  			("pay" . ?P)
  			("recurring" . ?R)
  			("activate" . ?a)
    			(:startgroup)
    			("read" . ?r)
    			("write" . ?s)
  			("study" . ?S)
    			("code" . ?c)
  			("training" . ?T)
    			("errand" . ?e)
    			(:endgroup))
    	org-capture-templates '(("t" "Tasks / Projects")
    				("tt" "Task" entry
    				 (file+olp "Tasks.org" "Personal Tasks")
    				 "** TODO %?\n %U\n %a\n %i" :empty-lines 1)

  				("tw" "Work Task" entry
    				 (file+olp "Tasks.org" "Work Tasks")
  				 "** TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

    				("j" "Log Entries")
    				("jp" "Piano Log Entry" entry (file+olp+datetree "piano-log.org")
    				 "* %<%I:%M %p> - \n%?" :empty-lines 1)
    				)))
	  #+end_src

** Tag faces
This one does not seem to be working.
#+begin_src emacs-lisp
  (setq org-tag-faces '(("piano" . (:foreground "forest green" :weight bold))
    		      ("ThisWeek" . (:foreground "sienna" :weight bold))
    		      ("Today" . (:foreground "yellow1" :weight bold))))
#+end_src

*** Org-refile to datetree
Very useful function to refile an entry in a datetree (e.g. piano-log.org) to a scheduled date (or TIMESTAMP or DEADLINE).
Taken from here: [[https://stackoverflow.com/questions/26648731/refile-existing-entry-to-different-location-in-org-mode-date-tree][Stack overflow link]]

#+begin_src emacs-lisp
  (defun org-refile-to-datetree ()
    "Refile a subtree to a datetree corresponding to it's timestamp."
    (interactive)
    (let* ((datetree-date (org-entry-get nil "SCHEDULED" t))
           (date (org-date-to-gregorian datetree-date)))
      (when date
        (save-excursion
          (org-cut-subtree)
          (org-datetree-find-date-create date)
          (org-narrow-to-subtree)
          (show-subtree)
          (org-end-of-subtree t)
          (newline)
          (goto-char (point-max))
          (org-paste-subtree 4)
          (widen)
          )
        )
      ))
#+end_src
** Org Super Agenda
Configure custom views

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :after org
    :hook (org-mode . org-super-agenda-mode))

  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
  	 (
  	  ;; (agenda ""
  	  ;; 	  ((org-agenda-remove-tags t)
  	  ;; 	   (org-agenda-span 7)
  	  ;; 	   ))
  	  (alltodo ""
  		   ((org-agenda-prefix-format "   %t   %s")

  		    (org-agenda-overriding-header "ALL TASKS")
  		    (org-super-agenda-groups '((:name "Active" :todo "ACTIVE" :order 0)
  					       (:name "Today" :tag "Today" :order 1)
  					       (:name "This Week" :tag "ThisWeek" :order 2)
  					       (:name "Recurring" :tag "recurring" :order 3)
  					       ))))))
  	("w" "This Week"
  	 ((tags-todo "ThisWeek"
  		     ((org-agenda-overriding-header "THIS WEEK")
  		      (org-agenda-remove-tags t)
  		      (org-super-agenda-groups '((:name "Work" :tag "@work" :order 0)
  						 (:name "Piano" :tag "piano" :order 1)
  						 (:name "Chess" :tag "chess" :order 2)
  						 (:name "Errands" :tag "errand" :order 3)
  						 (:name "Read" :tag "read" :order 4)
  						 (:name "Study" :tag "study" :order 5)
  						 ))))))
  	("y" "Today"
  	 ((tags-todo "Today"
  		     ((org-agenda-overriding-header "TODAY")
  		      (org-agenda-remove-tags t)
  		      (org-super-agenda-groups '((:name "Work" :tag "@work" :order 0)
  						 (:name "Piano" :tag "piano" :order 1)
  						 (:name "Chess" :tag "chess" :order 2)
  						 (:name "Errands" :tag "errand" :order 3)
  						 (:name "Read" :tag "read" :order 4)
  						 (:name "Study" :tag "study" :order 5)
  						 ))))))
  	("k" "Work"
  	 ((tags-todo "Work"
  		     (
  		      (org-agenda-overriding-header "WORK")
  		      (org-agenda-remove-tags t)
  		      (org-super-agenda-groups '((:name "Trainings" :tag "training" :order 0)
  						 (:name "Activate" :tag "activate" :order 1)
  						 ))))))
  	))
    #+end_src
** Org-books
#+begin_src emacs-lisp
  (use-package org-books
    :after org
    :config
    (setq org-books-file (format "%s/%s" org-base-path "mybooks.org")))
#+end_src

** Org-Roam
*** Basic config
#+begin_src emacs-lisp
  (setq org-roam-base-path (concat org-base-path "-roam"))

  (use-package org-roam
    :bind (("C-c n l" . org-roam-buffer-toggle)
  	 ("C-c n f" . org-roam-node-find)
  	 ("C-c n i" . org-roam-node-insert)
  	 :map org-mode-map ("C-M-i" . completion-at-point))
    :custom
    (org-roam-directory org-roam-base-path)
    (org-roam-completion-everywhere t)
    :config
    (org-roam-db-autosync-mode))

  (with-eval-after-load 'org-roam
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error ""))))

  (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

*** Bibliography
Here things get a bit complex. This is the sequence:
1. Use zotero and its BetterBibTex plugin to save org-roam/biblio.bib file
   (hopefully automatically every time I use the zotero plugin from the browser).
2. Use =citar= to read in that biblio.bib file
3. Use =citar-org-roam= to link citar with org-roam and open an org-roam node every time I use =citar-open=.

**** Citar configuration
#+begin_src emacs-lisp
  (setq bibliography-list (list (format "%s/%s" org-roam-base-path "biblio.bib")))

  (use-package citar
    :no-require
    :custom
    (org-cite-global-bibliography bibliography-list)
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    (citar-notes-paths (list (format "%s/%s" org-roam-base-path "reference")))
    (citar-symbols
     `((file ,(all-the-icons-faicon "file-pdf-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
       (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
       (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
    (citar-symbol-separator "  "))
#+end_src

**** citar-org-roam configuration
#+begin_src emacs-lisp
  (use-package citar-org-roam
    :after (citar org-roam)
    :config (citar-org-roam-mode))

  (setq citar-org-roam-subdir "reference")
  (setq citar-org-roam-note-title-template "${author} - ${title}")
#+end_src

citar has a function for inserting bibtex entries into a buffer, but none for
returning a string. We could insert into a temporary buffer, but that seems
silly. Plus, we'd have to deal with trailing newlines that the function
inserts. Instead, we do a little copying and implement our own function.

#+begin_src emacs-lisp
  (defun es/citar-get-bibtex (citekey)
    (interactive)
    (let* ((bibtex-files
            (citar--bibliography-files))
           (entry
            (with-temp-buffer
              (bibtex-set-dialect)
              (dolist (bib-file bibtex-files)
                (insert-file-contents bib-file))
              (bibtex-search-entry citekey)
              (let ((beg (bibtex-beginning-of-entry))
                    (end (bibtex-end-of-entry)))
                (buffer-substring-no-properties beg end)))))
      entry))
#+end_src

*** Capture Templates
#+begin_src emacs-lisp
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("m" "main" plain
           "%?"
           :target (file+head "main/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("b" "book notes" plain
           "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
           ;;        (file "~/org-roam/Templates/BookNoteTemplate.org")
           :target (file+head "reference/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("u" "url notes" plain
           "\n* Source\n\nURL: %^{URL}\nTitle: ${title}\n\n* Summary\n\n%?"
           ;;        (file "~/org-roam/Templates/URLTemplate.org")
           :target (file+head "reference/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
  	("n" "literature note" plain
  	 "%?"
  	 :target (file+head "(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
  			    "#+title: ${title}\n\n#+begin_src bibtex\n%(es/citar-get-bibtex citar-citekey)\n#+end_src\n")
  	 :unnarrowed t)
  	))
#+end_src

Fleeting notes, thanks to System Crafters:
#+begin_src emacs-lisp
  (defun es/org-roam-capture-fleeting ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("f" "fleeting" plain "* %?"
                                     :if-new (file+head "fleeting.org" "#+title: Fleeting note\n")))))

  (global-set-key (kbd "C-c n b") #'es/org-roam-capture-fleeting)
#+end_src

Every zettel is a draft until declared otherwise:

#+begin_src emacs-lisp

  (defun es/tag-new-node-as-draft ()
    (org-roam-tag-add '("draft")))
  (add-hook 'org-roam-capture-new-node-hook #'es/tag-new-node-as-draft)
#+end_src

Use citar-modified capture template for literature notes:

#+begin_src emacs-lisp
  (setq citar-org-roam-capture-template-key "n")
#+end_src

# #+begin_src emacs-lisp
#   ;; citar-org-roam only offers the citar-org-roam-note-title-template variable
#   ;; for customizing the contents of a new note and no way to specify a custom
#   ;; capture template. And the title template uses citar's own format, which means
#   ;; we can't run arbitrary functions in it.
#   ;;
#   ;; Left with no other options, we override the
#   ;; citar-org-roam--create-capture-note function and use our own template in it.

#   (setq citar-org-roam-subdir "reference")

#   (defun dh/citar-org-roam--create-capture-note (citekey entry)
#     "Open or create org-roam node for CITEKEY and ENTRY."
#     ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d
#     (let ((title (citar-format--entry
#                   citar-org-roam-note-title-template entry)))
#       (org-roam-capture-
#        :templates
#        '(("n" "literature note" plain
#           "%?"
#           :target (file+head "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citekey}.org"
#                              "#+title: ${title}\n\n#+begin_src bibtex\n%(dh/citar-get-bibtex citekey)\n#+end_src\n")
#           :immediate-finish t
#           :unnarrowed t))
#        :info (list :citekey citekey)
#        :node (org-roam-node-create :title title)
#        :props '(:finalize find-file))
#       (org-roam-ref-add (concat "@" citekey))))

#   ;; citar has a function for inserting bibtex entries into a buffer, but none for
#   ;; returning a string. We could insert into a temporary buffer, but that seems
#   ;; silly. Plus, we'd have to deal with trailing newlines that the function
#   ;; inserts. Instead, we do a little copying and implement our own function.

#   (defun dh/citar-get-bibtex (citekey)
#     (let* ((bibtex-files
#             (citar--bibliography-files))
#            (entry
#             (with-temp-buffer
#               (bibtex-set-dialect)
#               (dolist (bib-file bibtex-files)
#                 (insert-file-contents bib-file))
#               (bibtex-search-entry citekey)
#               (let ((beg (bibtex-beginning-of-entry))
#                     (end (bibtex-end-of-entry)))
#                 (buffer-substring-no-properties beg end)))))
#       entry))

#   (advice-add #'citar-org-roam--create-capture-note :override #'dh/citar-org-roam--create-capture-note)
# #+end_src

#+RESULTS:

* Vertico

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)

  ;; Show more candidates
  (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t))
#+end_src

* Vertico posframe

To center the minibuffer
#+begin_src emacs-lisp
  (use-package vertico-posframe
    :init
    (vertico-posframe-mode 1))
#+end_src

* Marginalia

Give more details to minibuffer commands

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be actived in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

* Consult

Toolset that adds useful functionality to commands

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :after vertico
    :bind (("C-x b"       . consult-buffer)
	   ("C-x C-k C-k" . consult-kmacro)
	   ("M-y"         . consult-yank-pop)
	   ("M-g g"       . consult-goto-line)
	   ("M-g M-g"     . consult-goto-line)
	   ("M-g f"       . consult-flymake)
	   ("M-g i"       . consult-imenu)
	   ("C-s"         . consult-line)
	   ("M-s L"       . consult-line-multi)
	   ("M-s u"       . consult-focus-lines)
	   ("M-s g"       . consult-ripgrep)
	   ("M-s M-g"     . consult-ripgrep)
	   ("M-s f"       . consult-find)
	   ("M-s M-f"     . consult-find)
	   ("C-x C-SPC"   . consult-global-mark)
	   ("C-x M-:"     . consult-complex-command)
	   ;; ("C-c n"       . consult-org-agenda)
	   ("M-X"         . consult-mode-command)
	   :map minibuffer-local-map
	   ("M-r" . consult-history)
	   :map Info-mode-map
	   ("M-g i" . consult-info)
	   :map org-mode-map
	   ("M-g i"  . consult-org-heading))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    :config
    (recentf-mode t))
#+end_src

#+begin_src emacs-lisp
  (use-package consult-dir
    :ensure t
    :bind (("C-x C-j" . consult-dir)
	   :map vertico-map
	   ("C-x C-j" . consult-dir)))
#+end_src

* Corfu mode

Implements completion at point. TODO requires more study.

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-preselect 'directory)
    :init
    (global-corfu-mode)
    (setq tab-always-indent 'complete))

  ;; A few more useful configurations...
  ;; (use-package emacs
  ;;   :custom
  ;;   ;; Enable indentation+completion using the TAB key.
  ;;   ;; `completion-at-point' is often bound to M-TAB.
  ;;   (tab-always-indent 'complete)

  ;;   ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
  ;;   ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
  ;;   ;; setting is useful beyond Corfu.
  ;;   (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

* Orderless
** Basic working
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
 #+end_src

** Not working
A completion style, copied from here: https://kristofferbalintona.me/posts/202202211546/

* Embark

#+begin_src emacs-lisp
 (use-package embark)
 (use-package embark-consult
   :hook
   (embark-collection-mode . consult-preview-at-point-mode))
#+end_src

* All the Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* All the icons completions

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src
* Rainbow mode and delimiters

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook org-mode prog-mode)

  (use-package rainbow-delimiters
    :hook ((org-mode . rainbow-delimiters-mode)
	   (prog-mode . rainbow-delimiters-mode)))
#+end_src

* Doom modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

* exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    (when (daemonp)
      (exec-path-from-shell-initialize)))
#+end_src

* Tree-sit auto
#+begin_src emacs-lisp
  (use-package treesit-auto
    :demand t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (global-treesit-auto-mode))

#+end_src
* Tree-sitter grammars
# #+begin_src emacs-lisp
#   (setq treesit-language-source-alist
#    '((bash "https://github.com/tree-sitter/tree-sitter-bash")
#      (cmake "https://github.com/uyha/tree-sitter-cmake")
#      (css "https://github.com/tree-sitter/tree-sitter-css")
#      (elisp "https://github.com/Wilfred/tree-sitter-elisp")
#      (go "https://github.com/tree-sitter/tree-sitter-go")
#      (html "https://github.com/tree-sitter/tree-sitter-html")
#      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
#      (json "https://github.com/tree-sitter/tree-sitter-json")
#      (make "https://github.com/alemuller/tree-sitter-make")
#      (markdown "https://github.com/ikatyang/tree-sitter-markdown")
#      (python "https://github.com/tree-sitter/tree-sitter-python")
#      (toml "https://github.com/tree-sitter/tree-sitter-toml")
#      (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
#      (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
#      (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

#   ;; install all these language grammars
#   (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

# #+end_src

# ** Remap major modes into tree-sitter major-modes
# #+begin_src emacs-lisp
#   (setq major-mode-remap-alist
#         '((yaml-mode . yaml-ts-mode)
#   	(bash-mode . bash-ts-mode)
#   	(js2-mode . js-ts-mode)
#   	(typescript-mode . typescript-ts-mode)
#   	(json-mode . json-ts-mode)
#   	(css-mode . css-ts-mode)
#   	(python-mode . python-ts-mode)))
# #+end_src

* Treesit-fold
This is a fork of ts-fold, which uses the native treesit.el instead of the old tree-sitter.
This is the link: https://github.com/abougouffa/treesit-fold
#+begin_src emacs-lisp
  (use-package treesit-fold
    :straight (treesit-fold :type git :host github :repo "emacs-tree-sitter/treesit-fold")
    :bind (:map treesit-fold-mode-map
  	  ("C-c d" . treesit-fold-close)
  	  ("C-c s" . treesit-fold-open)))

  (global-treesit-fold-indicators-mode 1)
  (setq treesit-fold-indicators-fringe 'left-fringe)
#+end_src

* Python mode

#+begin_src emacs-lisp
   (use-package python
     :hook ((python-ts-mode . eglot-ensure))
     :mode (("\\.py\\'" . python-ts-mode)))
#+end_src
Flymake-show-buffer-diagnostics shows the errors on the python file

** pyvenv

#+begin_src emacs-lisp

  (use-package pyvenv
    :ensure t
    :init
    (setenv "WORKON_HOME" "~/.uvenv")
    :config
    (pyvenv-mode 1)
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")))))
#+end_src

** Highlight-indent-guides

NOTE Had to disable this because it messes with the fonts when I do code folding using treesit-fold. Have to debug before I can use it again.

#+begin_src emacs-lisp
  ;; (use-package highlight-indent-guides
  ;;   :init
  ;;   (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  ;;   :config
  ;;   (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
  ;;   (setq highlight-indent-guides-method 'fill))
#+end_src

* YAML mode
Define Yaml mode. TODO Need to change the key mapping.
Need the treesitter yaml grammar installed:

=npm install tree-sitter-yaml tree-sitter=

#+begin_src emacs-lisp
  (use-package yaml-mode
    :hook (yaml-mode . (lambda () (define-key yaml-mode-map "C-m" 'newline-and-indent)))
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

* Eglot

#+begin_src emacs-lisp
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '('(python-mode python-ts-mode) . ("ruff" "server")))
    ;; (add-to-list 'eglot-server-programs '('(python-mode python-ts-mode) . ("/Users/emmanuelesalvati/.uvenv/prep-shared-py3.11/bin/pylsp")))
    :hook
    ((python-ts-mode . eglot-ensure)
     (python-mode . eglot-ensure))
    :config
    (setq-default eglot-workspace-configuration
  		'((:pylsp . (:plugins
  			     (:pycodestyle (:enabled :json-false)
  			      :ruff (:enabled t
  					      :formatEnabled t
  					      :lineLength 88
  					      :select "F"
  					      :ignore "D210"
  					      :preview t
  					      :codeAction t) ))
  			  ))))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package eglot
  ;;   :bind (:map eglot-mode-map
  ;; 	      ("C-c d" . eldoc)
  ;; 	      ("C-c a" . eglot-code-actions)
  ;; 	      ("C-c r" . eglot-rename)
  ;; 	      ("C-c f" . eglot-format-buffer))
  ;;   :hook ((python-ts-mode . eglot-ensure)
  ;; 	 (python-ts-mode . hs-minor-mode)
  ;; 	 (python-ts-mode . flyspell-prog-mode)
  ;; 	 (python-ts-mode . (lambda () (set-fill-column 88)))))
    ;; :config
    ;; (setq-default eglot-workspace-configuration
    ;; 		'((:pylsp . (:configurationSources ["flake8"]
    ;; 						   :plugins (
    ;; 							     :pycodestyle ( :enabled :json-false)
    ;; 							     :mccabe (:enabled :json-false)
    ;; 							     :pyflakes (:enabled :json-false)
    ;; 							     :flake8 (:enabled :json-false
    ;; 									       :maxLineLength 88)
    ;; 							     :ruff (:enabled t
    ;; 									     :lineLength 88)
    ;; 							     :pydocstyle (:enabled t
    ;; 										   :convention "numpy")
    ;; 							     :yapf (:enabled t :json-false)
    ;; 							     :autopep8 (:enabled :json-false)
    ;; 							     :black (:enabled t
    ;; 									      :line_length 88
    ;; 									      :cache_config t)))))))
#+end_src

* vterm
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq vterm-max-scrollback 5000)
    (if (eq system-type 'darwin)
      (setq shell-file-name "/opt/homebrew/bin/zsh")
      (setq shell-file-name "/usr/bin/zsh")))
  (define-key vterm-mode-map (kbd "C-c C-c") 'vterm--self-insert)
#+end_src

** vterm-toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil
  	vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
  	       '((lambda (buffer-or-name _)
  		   (let ((buffer (get-buffer buffer-or-name)))
  		     (with-current-buffer buffer
  		       (or (equal major-mode 'vterm-mode)
  			   (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
  		 (display-buffer-reuse-window display-buffer-at-bottom)
  		 (reusable-frames . visible)
  		 (window-height . 0.3))))

  (keymap-global-set "<f2>" 'vterm-toggle)
#+end_src

* Line number mode
To display line numbers in programming modes:
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

* Dired-rsync

#+begin_src emacs-lisp
  (use-package dired-rsync
    :bind (:map dired-mode-map ("C-c C-r" . dired-rsync)))

  (use-package dired-rsync-transient
    :bind (:map dired-mode-map ("C-c C-x" . dired-rsync-transient)))
#+end_src

* Markdown
This requires multimarkdown installed on the machine, e.g. in MacOsX, =brew install multimarkdown=.
The preview key-binding is =C-c C-c l=
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Lilypond
#+begin_src emacs-lisp
  (unless (eq system-type 'darwin)
    (require 'lilypond-mode))
#+end_src
* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (treemacs-follow-mode t))
#+end_src

#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)
#+end_src

* Winum
Window numbering switch. kbd is "C-x w <n>"
Or, if you have treemacs open "M-0" to select the treemacs tab.

#+begin_src emacs-lisp
  (use-package winum
    :ensure t
    :config
    (winum-mode t))
#+end_src
