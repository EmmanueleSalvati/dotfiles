#+title: Personal crafted emacs configuration
#+PROPERTY: header-args:emacs-lisp :mkdirp yes :tangle ~/.emacs.crafted/init.el

* Package System Setup

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (and custom-file
             (file-exists-p custom-file))
    (load custom-file nil :nomessage))

  (load "~/Code/crafted-emacs/modules/crafted-init-config")
#+end_src

** Basic stuff

#+begin_src emacs-lisp
  (require 'crafted-startup-config)
  (require 'crafted-defaults-config)
#+end_src

** Font and transparency

These are basic font configurations

#+begin_src emacs-lisp

  (defvar es/default-font-size 100)
  (defvar es/default-variable-font-size 100)
  (when (eq system-type 'darwin)
    (setq es/default-font-size 180
	  es/default-variable-font-size 180))
  (when (equal (system-name) "yarnbaby")
    (setq es/default-font-size 150
	  es/default-variable-font-size 150))
  (defvar es/frame-transparency '(99 . 99))

#+end_src

#+begin_src emacs-lisp
  (defun es/set-font-faces ()
    (message "Setting font faces!")

    (set-face-attribute 'default nil :font "Iosevka" :height es/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height es/default-font-size)
    (set-face-attribute 'variable-pitch nil :font "Iosevka" :height es/default-variable-font-size :weight 'regular))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (setq doom-modeline-icon t)
		  (with-selected-frame frame
		    (es/set-font-faces))))
    (es/set-font-faces))
#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'doom-themes)
  (package-install-selected-packages :noconfirm)

  (load-theme 'doom-palenight)
#+end_src

** UI stuff
#+begin_src emacs-lisp
(require 'crafted-ui-packages)
(package-install-selected-packages :noconfirm)
(require 'crafted-ui-config)
#+end_src
** Doom modeline
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'doom-modeline)
  (package-install-selected-packages :noconfirm)
  (require 'doom-modeline)
  (add-hook 'after-init-hook #'doom-modeline-mode)
#+end_src
** Text Scaling
I like the jkf for text scaling

* Babel Languages

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-langagues '((emacs-lisp . t) (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

* Coding stuff
** Code completion

Have to figure out the various completion tools in here:

#+begin_src emacs-lisp
  (require 'crafted-completion-packages)
#+end_src

** IDE stuff
#+begin_src emacs-lisp
  (require 'crafted-ide-packages)
  (require 'crafted-ide-config)
  (add-hook 'prog-mode-hook #'aggressive-indent-mode)
  (crafted-ide-eglot-auto-ensure-all)
  (crafted-ide-configure-tree-sitter '(css html python))
#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (add-to-list 'package-selected-packages 'rainbow-delimiters)
  (package-install-selected-packages :noconfirm)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

#+end_src

** Yasnippet

Cool code completion snippets. Main package plus directory for other snippets

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-selected-packages 'yasnippet)
  (add-to-list 'package-selected-packages 'yasnippet-snippets)
  (package-install-selected-packages :noconfirm)

  (yas-reload-all)
  (add-hook 'text-mode-hook #'yas-minor-mode-on)
  (add-hook 'prog-mode-hook #'yas-minor-mode-on)
  (add-hook 'conf-mode-hook #'yas-minor-mode-on)
  (add-hook 'snippet-mode-hook #'yas-minor-mode-on)

  (customize-set-variable 'yas-snippet-dir "~/.emacs.crafted/snippets")

#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-selected-packages 'magit)
  (package-install-selected-packages :noconfirm)
;;  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
#+END_SRC
* Org Mode
#+begin_src emacs-lisp
  (require 'crafted-org-config)
  (add-to-list 'package-selected-packages 'org-roam)
  (package-install-selected-packages :noconfirm)
#+end_src

** Center Org Buffers

Use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center org-mode buffers

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-selected-packages 'visual-fill-column)
  (package-install-selected-packages :noconfirm)

  (defun es/org-mode-visual-fill ()
    (customize-set-variable 'visual-fill-column-width 140)
    (customize-set-variable 'visual-fill-column-center-text t)
    
    (visual-fill-column-mode 1))

  (add-hook 'org-mode-hook #'es/org-mode-visual-fill)
#+END_SRC

** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-bullets)
  (package-install-selected-packages :noconfirm)
  (add-hook 'org-mode-hook #'org-bullets-mode)
  (customize-set-variable 'org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
#+end_src

** Better Font Faces

The =es/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun es/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

  (add-hook 'org-mode-hook #'es/org-font-setup)

#+end_src
